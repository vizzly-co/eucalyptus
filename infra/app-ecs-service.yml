Description: >
  An ECS Service for a long-running task from the vizzly-co/eucalyptus repo
Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Environment:
    Description: Environment identifier
    Type: String
    Default: example

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1

  ECRDockerImage:
    Description: Docker image url of the app
    Type: String

  HostPort:
    Description: Port to expose on the host. Must be unique per task on the host.
    Type: Number

  AppPort:
    Description: Port the app runs on.
    Type: Number

  ContainerMemory:
    Description: Container memory allocation
    Type: Number
    Default: 256

  TaskRoleArn:
    Description: (OPTIONAL) The ARN of the role that grants containers in the task permission to call AWS APIs on your behalf
    Type: String

  LoadBalancerArn:
    Description: ARN of the example load balancer
    Type: String
    Default: arn:aws:elasticloadbalancing:eu-west-2:463194597663:loadbalancer/app/example-load-balancer/88c4eab0ace67f6a

  TargetGroupArn:
    Description: ARN of the example target group
    Type: String
    Default: arn:aws:elasticloadbalancing:eu-west-2:463194597663:targetgroup/vizzl-AppTa-72OXAOUAMS20/294e3e13d715612d

  CertificateArn:
    Description: ARN of the certificate
    Type: String
    Default: arn:aws:acm:eu-west-2:463194597663:certificate/aff25fc1-d398-45c1-98bd-e163daa9bce3

  AppName:
    Description: Eucalyptus app name
    Type: String
    AllowedValues:
      [
        "eucalyptus-in-browser",
        "eucalyptus-node-smart-proxy",
        "dynamic-datasets-dashboard",
        "eucalyptus-identity",
        "programmatic-in-browser",
        "in-browser-encrypted-dashboards",
        "global-library-with-editor",
        "in-browser-encrypted-dashboard-management",
        "in-browser-webcomponent",
        "dashboard-management",
        "dynamic-remote-config",
        "upcasting-regression-testing",
        "track-user-events",
        "pdf-download-with-addons",
        "pdf-download-with-no-addons",
        "sql-views",
        "microsoft-sql-server",
        "redshift",
        "result-accuracy",
        "dashboard-external-filters",
        "in-browser-global-library",
        "js-services-only",
        "editor-webcomponent",
        "remote-config-endpoint",
        "custom-components",
      ]

Conditions:
  ProvidedTaskRole: !Not [!Equals [!Ref TaskRoleArn, ""]]

Resources:
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Sub arn:aws:ecs:eu-west-2:463194597663:cluster/example-koala
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      PlacementStrategy:
        - field: instanceId
          type: spread

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Environment}-${AppName}
      TaskRoleArn: !If [ProvidedTaskRole, !Ref TaskRoleArn, !Ref "AWS::NoValue"]
      ExecutionRoleArn: !Ref TaskDefinitionExecutionRole
      ContainerDefinitions:
        - Name: !Sub ${Environment}-${AppName}
          Essential: true
          Image: !Ref ECRDockerImage
          Memory: !Ref ContainerMemory
          PortMappings:
            - ContainerPort: !Ref AppPort
              HostPort: !Ref HostPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${Environment}-${AppName}-${AWS::StackName}
      RetentionInDays: 30

  TaskDefinitionExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com

  TaskDefinitionExecutionRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: TaskDefinitionExecutionRolePolicy
      Roles:
        - Ref: TaskDefinitionExecutionRole
      PolicyDocument:
        Statement:
          - Action:
              - cloudwatch:*
              - logs:*
            Resource:
              - "*"
            Effect: "Allow"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: !Ref HostPort
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupArn
